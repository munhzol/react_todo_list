{"version":3,"sources":["components/AddForm.jsx","components/ListRow.jsx","App.js","serviceWorker.js","index.js"],"names":["AddForm","props","addTodoText","setAddTodoText","setTodoList","todoList","className","onChange","e","target","value","name","id","rows","type","onClick","arr","done","todo","localStorage","setItem","JSON","stringify","ListRow","index","scope","i","checkDone","checked","j","length","deleteToDo","App","useState","getItem","parse","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAwBeA,EAtBC,SAAAC,GAAU,IAEfC,EAAqDD,EAArDC,YAAaC,EAAwCF,EAAxCE,eAAgBC,EAAwBH,EAAxBG,YAAYC,EAAYJ,EAAZI,SAShD,OACI,8BACI,yBAAKC,UAAU,oCAAf,eACA,yBAAKA,UAAU,cACb,8BAAUC,SAAU,SAACC,GAAD,OAAKL,EAAeK,EAAEC,OAAOC,QAAQJ,UAAU,eAAeK,KAAK,GAAGC,GAAG,SAASC,KAAK,IAAIH,MAAOR,KAExH,4BAAQY,KAAK,SAASC,QAbd,WACZ,IAAIC,EAAG,CAAI,CAACC,KAAK,EAAGC,KAAMhB,IAAnB,mBAAoCG,IAC3CD,EAAYY,GACZb,EAAe,IACfgB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,KASJV,UAAU,6BAAlD,SCkBGiB,EAnCC,SAAAtB,GAAU,IAEfuB,EAAqCvB,EAArCuB,MAAON,EAA8BjB,EAA9BiB,KAAMd,EAAwBH,EAAxBG,YAAYC,EAAYJ,EAAZI,SAmBhC,OACI,4BACI,wBAAIoB,MAAM,OACN,yBAAKnB,UAAU,cACX,2BAAOQ,KAAK,WAAWP,SAAU,SAACC,GAAD,OArB/B,SAACkB,GACf,IAAIV,EAAG,YAAOX,GACdW,EAAIU,GAAGT,KAAqB,IAAdD,EAAIU,GAAGT,KAAS,EAAE,EAChCb,EAAYY,GACZG,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,IAiBEW,CAAUH,IAASlB,UAAU,mBAAmBsB,QAAqB,IAAZV,EAAKD,KAAS,UAAU,OAG/H,wBAAIX,UAAuB,IAAZY,EAAKD,KAAS,WAAW,IAAxC,IAA+CC,EAAKA,KAApD,KACA,4BAAI,4BAAQJ,KAAK,SAASC,QAAS,SAACP,GAAD,OAlBtB,SAACkB,GAElB,IADA,IAAIV,EAAM,GACFa,EAAI,EAAGA,EAAExB,EAASyB,OAAQD,IAC7BH,IAAIG,IACLb,EAAG,sBAAOA,GAAP,CAAYX,EAASwB,MAE5BzB,EAAYY,GACZG,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,IAWFe,CAAWP,IAASlB,UAAU,iCAApE,aC2BD0B,MApDf,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAEN/B,EAFM,KAEOC,EAFP,OAGmB8B,mBAASd,aAAae,QAAQ,YAAYb,KAAKc,MAAMhB,aAAae,QAAQ,aAAa,IAH1G,mBAGN7B,EAHM,KAGID,EAHJ,KAOb,OACE,yBAAKE,UAAU,OAEb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,cAGF,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAASJ,YAAaA,EAAaC,eAAgBA,EAAgBE,SAAUA,EAAUD,YAAaA,KAGtG,yBAAKE,UAAU,YAEf,2BAAOA,UAAU,qBACf,+BACE,4BACE,wBAAImB,MAAM,aACV,wBAAIA,MAAM,eAAV,aACA,wBAAIA,MAAM,eAGd,+BAGIpB,EAAS+B,KAAI,SAAClB,EAAKQ,GAAN,OACX,kBAAC,EAAD,CAASW,IAAKX,EAAGF,MAAOE,EAAGR,KAAMA,EAAMd,YAAaA,EAAaC,SAAUA,cC7BzEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c57c64be.chunk.js","sourcesContent":["import React from 'react';\n\nconst AddForm = props => {\n\n    const {addTodoText, setAddTodoText, setTodoList,todoList} = props;\n\n    const addToDo = () => {\n        let arr = [{done:0, todo: addTodoText}, ...todoList];\n        setTodoList(arr);\n        setAddTodoText('');\n        localStorage.setItem(\"todolist\", JSON.stringify(arr));\n      }\n\n    return(\n        <form>\n            <div className=\"p-3 mb-2 bg-secondary text-white\">Add new one</div>\n            <div className=\"form-group\">\n              <textarea onChange={(e)=>setAddTodoText(e.target.value)} className=\"form-control\" name=\"\" id=\"addNew\" rows=\"5\" value={addTodoText} ></textarea>\n            </div>\n            <button type=\"button\" onClick={addToDo} className=\"btn btn-primary btn-block\">Add</button>\n        </form>\n    );\n}\n\nexport default AddForm;","import React from 'react';\n\nconst ListRow = props => {\n\n    const {index, todo, setTodoList,todoList} = props;\n\n    const checkDone = (i) => {\n        let arr = [...todoList];\n        arr[i].done = arr[i].done===0?1:0;\n        setTodoList(arr);\n        localStorage.setItem(\"todolist\", JSON.stringify(arr));\n      }\n    \n      const deleteToDo = (i) => {\n        let arr = [];\n        for(let j = 0; j<todoList.length; j++){\n          if(i!==j)\n            arr = [...arr, todoList[j]];\n        }\n        setTodoList(arr)\n        localStorage.setItem(\"todolist\", JSON.stringify(arr));\n      }\n\n    return(\n        <tr>\n            <th scope=\"row\">\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" onChange={(e)=>checkDone(index) } className=\"form-check-input\" checked={todo.done===1?'checked':''}  />\n                </div>                  \n            </th>\n            <td className={todo.done===1?'todoDone':''} > {todo.todo} </td>\n            <td><button type=\"button\" onClick={(e) => deleteToDo(index) } className=\"btn btn-sm btn-outline-danger\">Delete</button></td>\n        </tr> \n        \n    );\n}\n\nexport default ListRow;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AddForm from './components/AddForm';\nimport ListRow from './components/ListRow';\n\nfunction App() {\n\n  const [addTodoText, setAddTodoText] = useState('');\n  const [todoList, setTodoList] = useState(localStorage.getItem(\"todolist\")?JSON.parse(localStorage.getItem(\"todolist\")):[]);\n\n \n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-3\">ToDo List</h1>\n        </div>\n\n        <div className=\"row\">\n\n          <div className=\"col-md-4 bg-light\">\n            <AddForm addTodoText={addTodoText} setAddTodoText={setAddTodoText} todoList={todoList} setTodoList={setTodoList} />\n          </div>\n\n          <div className=\"col-md-8\">\n\n          <table className=\"table table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col-md-1\"></th>\n                <th scope=\"col-md-auto\">What todo</th>\n                <th scope=\"col-md-1\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              \n              {\n                todoList.map((todo,i) => \n                  <ListRow key={i} index={i} todo={todo} setTodoList={setTodoList} todoList={todoList}  />\n                )\n              }\n\n            </tbody>\n          </table>\n\n          </div>\n\n        </div>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}